var e=require("path").basename,s=require("@ermish/shuji").transformMarkdownString,r=require("@parcel/diagnostic"),o=require("@parcel/plugin").Transformer,a=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0});var t=void 0;exports.default=t;var i=a(r);t=new o({canReuseAST:async function({ast:e,options:s,logger:r}){return!1},transform:async function({asset:r,config:o,logger:a,resolve:t,options:n}){try{a.verbose({message:`Shuji: options= ${JSON.stringify(n)}`}),a.verbose({message:"Shuji: before calling get code."});const o=await r.getCode();a.verbose({message:"Shuji: get code works!"});const t=e(r.filePath,".md");a.verbose({message:"Shuji: get component name works!"}),a.verbose({message:"Shuji: Converting markdown to jsx..."});const i=await s(o,t);return a.verbose({message:`Shuji: creating "${t}" component...`}),r.setMap(null),n.env.sourceMap=!1,a.verbose({message:`Shuji: options.sourcemap= ${JSON.stringify(n.env.sourceMap)}`}),[{type:"js",content:i,uniqueKey:t,filePath:"jsxFiles",isSource:!1,isIsolated:!0,isInline:!0,isEntry:!0,sideEffects:!1,sourceMap:!1,sourceMaps:!1,map:!1}]}catch(e){throw a.info({message:"Shuji: Error occurred!"}),new i.default({diagnostic:{message:e.message,filePath:r.filePath,language:r.type,stack:e.stack,name:e.name,codeFrame:{code:await r.getCode(),codeHighlights:[{start:{line:1,column:5},end:{line:2,column:3},message:"This is my error message!!!! oh noes!"}]},hints:["Try using a markdown validator to ensure your mardown files are valid."]}})}}}),exports.default=t;
//# sourceMappingURL=index.js.map
