{"mappings":"4MAAA,MAAAA,EAAAC,EACAC,KAAAC,+BACAC,EAAAC,EACAC,EAAAC,IAEe,IAAIC,EAAAA,YAAY,CAC7BC,WAAA,OAAiBC,OAAEA,EAAFC,QAAUA,EAAVC,OAAmBA,KAC3BF,EASTG,iBAAgBC,MAAEA,EAAFJ,OAASA,EAATE,OAAiBA,EAAjBG,QAAyBA,EAAzBJ,QAAkCA,IAChDC,EAAOI,KAAK,CAAEC,QAAS,yCAEvB,IACI,MAAMC,QAAaJ,EAAMK,UACnBC,GAAiB,EAAAhB,EAAAiB,aAAYV,EAAQW,YAAaR,EAAMS,UAMhE,MAAO,CACL,CACEC,KAAM,KACNC,cAP8B,EAAAnB,EAAAoB,yBAAwBR,GAQtDS,UAAWP,IAGb,MAAOQ,GACP,MAAM,IAAIC,EAAAA,QAAoB,CAC5BC,WAAY,CACVb,QAASW,EAAIX,QACbM,SAAUT,EAAMS,SAChBQ,SAAUjB,EAAMU,KAChBQ,MAAOJ,EAAII,MACXC,KAAML,EAAIK,KACVC,UAAW,CACThB,WAAYJ,EAAMK,UAClBgB,eAAgB,CACd,CACEC,MAAO,CACLC,KAAM,EACNC,OAAQ,GAEVC,IAAK,CACHF,KAAM,EACNC,OAAQ,GAEVrB,QAAS,2CAIfuB,MAAO,CACL,6EAMV,MAAO,CAAC1B","sources":["./src/index.ts"],"sourcesContent":["import { Transformer } from \"@parcel/plugin\"\r\nimport ThrowableDiagnostic from \"@parcel/diagnostic\"\r\nimport { relativeUrl } from '@parcel/utils'\r\nimport { transformMarkdownString } from '@ermish/shuji'\r\n\r\nexport default new Transformer({\r\n  async loadConfig({ config, options, logger }) {\r\n    return config\r\n  },\r\n\r\n  // async parse({ asset, config, logger, resolve, options }) {\r\n  //   logger.info({ message: 'Shuji: Parsing markdown files...' })\r\n\r\n  //   return ast\r\n  // },\r\n\r\n  async transform({ asset, config, logger, resolve, options }) {\r\n    logger.info({ message: 'Shuji: Converting markdown to jsx...'})\r\n\r\n    try {\r\n        const code = await asset.getCode();\r\n        const sourceFileName = relativeUrl(options.projectRoot, asset.filePath);\r\n\r\n        const transformedString = await transformMarkdownString(code)\r\n\r\n\r\n\r\n      return [\r\n        {\r\n          type: 'js',\r\n          content: transformedString,\r\n          uniqueKey: sourceFileName\r\n        }\r\n      ]\r\n      } catch (err) {\r\n        throw new ThrowableDiagnostic({\r\n          diagnostic: {\r\n            message: err.message,\r\n            filePath: asset.filePath,\r\n            language: asset.type,\r\n            stack: err.stack,\r\n            name: err.name,\r\n            codeFrame: {\r\n              code: await asset.getCode(),\r\n              codeHighlights: [\r\n                {\r\n                  start: {\r\n                    line: 1,\r\n                    column: 5,\r\n                  },\r\n                  end: {\r\n                    line: 2,\r\n                    column: 3,\r\n                  },\r\n                  message: \"This is my error message!!!! oh noes!\",\r\n                },\r\n              ],\r\n            },\r\n            hints: [\r\n              \"Try using a markdown validator to ensure your mardown files are valid.\",\r\n            ],\r\n          },\r\n        });\r\n      }\r\n\r\n    return [asset];\r\n  },\r\n\r\n  // async generate({ asset, ast, resolve, options }) {\r\n  //   logger.info({ message: 'Shuji: Generating jsx files...'})\r\n\r\n  //   return { code, map };\r\n  // }\r\n});\r\n"],"names":["$a68ee30723d3def13c6fa6ba8cf8c2b8$var$_plugin","_parcelPlugin","$a68ee30723d3def13c6fa6ba8cf8c2b8$var$_diagnostic","_parcelDiagnostic","$a68ee30723d3def13c6fa6ba8cf8c2b8$var$_utils","_parcelUtils","$a68ee30723d3def13c6fa6ba8cf8c2b8$var$_shuji","_ermishShuji","Transformer","loadConfig","config","options","logger","[object Object]","asset","resolve","info","message","code","getCode","sourceFileName","relativeUrl","projectRoot","filePath","type","content","transformMarkdownString","uniqueKey","err","ThrowableDiagnostic","diagnostic","language","stack","name","codeFrame","codeHighlights","start","line","column","end","hints"],"version":3,"file":"index.js.map"}