{"mappings":"8TAgBQA,UAAAA,gBAAAA,MAAYC,EAAAA,OAAOC,EAAAA,OAAQC,EAAAA,QAAQC,EAAAA,QAASC,cAGpCC,QAAaL,EAAMM,UACnBC,EAAAA,EAA4BP,EAAMQ,SAAU,OAElDN,EAAOO,QAAAA,CAAUC,QAAS,+CAEpBC,QAAoBC,EAA8BP,EAAME,UAE9DL,EAAOO,QAAAA,CAAUC,QAAAA,mBAA4BH,qBAMvCM,KAAM,KACNC,QAASH,EACTI,UAAWR,EACXC,SAAU,WACVQ,WAAW,KACRhB,UAGFiB,SACLf,EAAOgB,KAAAA,CAAOR,QAAS,0CAGnBS,WAAAA,CACIT,QAASO,EAAIP,QACbF,SAAUR,EAAMQ,SAChBY,SAAUpB,EAAMa,KAChBQ,MAAOJ,EAAII,MACXC,KAAML,EAAIK,KACVC,UAAAA,CACIlB,WAAYL,EAAMM,UAClBkB,eAAAA,CAAAA,CAEQC,MAAAA,CACAC,KAAM,EACNC,OAAQ,GAERC,IAAAA,CACAF,KAAM,EACNC,OAAQ,GAERjB,QAAS,2CAIrBmB,MAAAA,CACI","sources":["./src/index.ts"],"sourcesContent":["import { Transformer } from \"@parcel/plugin\"\r\nimport ThrowableDiagnostic from \"@parcel/diagnostic\"\r\nimport { transformMarkdownString } from '@ermish/shuji'\r\nimport { basename } from 'path'\r\n\r\nexport default (new Transformer({\r\n//   async loadConfig({ config, options, logger }) {\r\n//     return config\r\n//   },\r\n\r\n  // async parse({ asset, config, logger, resolve, options }) {\r\n  //   logger.info({ message: 'Shuji: Parsing markdown files...' })\r\n\r\n  //   return ast\r\n  // },\r\n\r\n  async transform({ asset, config, logger, resolve, options }) {\r\n \r\n      try {\r\n          const code = await asset.getCode()\r\n          const newComponentName = basename(asset.filePath, '.md')\r\n\r\n          logger.verbose({ message: 'Shuji: Converting markdown to jsx...'})\r\n\r\n          const transformedString = await transformMarkdownString(code, newComponentName)\r\n\r\n          logger.verbose({ message: `Shuji: creating ${newComponentName} component...`})\r\n\r\n          //asset.setCode(transformedString)\r\n\r\n        return [\r\n            {\r\n                type: 'js',\r\n                content: transformedString,\r\n                uniqueKey: newComponentName,\r\n                filePath: 'jsxFiles',\r\n                sourcemap: false,\r\n                ...asset\r\n            }\r\n        ]\r\n        } catch (err) {\r\n            logger.info({ message: 'Shuji: Error occurred!'})\r\n\r\n            throw new ThrowableDiagnostic({\r\n                diagnostic: {\r\n                    message: err.message,\r\n                    filePath: asset.filePath,\r\n                    language: asset.type,\r\n                    stack: err.stack,\r\n                    name: err.name,\r\n                    codeFrame: {\r\n                        code: await asset.getCode(),\r\n                        codeHighlights: [\r\n                            {\r\n                                start: {\r\n                                line: 1,\r\n                                column: 5,\r\n                                },\r\n                                end: {\r\n                                line: 2,\r\n                                column: 3,\r\n                                },\r\n                                message: \"This is my error message!!!! oh noes!\",\r\n                            },\r\n                        ],\r\n                    },\r\n                    hints: [\r\n                        \"Try using a markdown validator to ensure your mardown files are valid.\",\r\n                    ],\r\n                },\r\n            })\r\n        }\r\n    }\r\n}))\r\n"],"names":["transform","asset","config","logger","resolve","options","code","getCode","newComponentName","filePath","verbose","message","transformedString","transformMarkdownString","type","content","uniqueKey","sourcemap","err","info","diagnostic","language","stack","name","codeFrame","codeHighlights","start","line","column","end","hints"],"version":3,"file":"index.js.map"}