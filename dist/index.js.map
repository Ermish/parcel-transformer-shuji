{"mappings":"8TAgBQA,YAAAA,gBAAAA,IAAcC,EAAAA,QAAKC,EAAAA,OAASC,WACzB,GAGHC,UAAAA,gBAAAA,MAAYC,EAAAA,OAAOC,EAAAA,OAAQH,EAAAA,QAAQI,EAAAA,QAASL,QAI1CC,EAAOK,QAAAA,CAAUC,QAAAA,mBAA4BC,KAAKC,UAAUT,OAG5DC,EAAOK,QAAAA,CAAUC,QAAAA,0CAGXG,QAAaP,EAAMQ,UAEzBV,EAAOK,QAAAA,CAAUC,QAAAA,iCAEXK,EAAAA,EAA4BT,EAAMU,SAAU,OAElDZ,EAAOK,QAAAA,CAAUC,QAAAA,qCAEjBN,EAAOK,QAAAA,CAAUC,QAAS,+CAEpBO,QAAoBC,EAA8BL,EAAME,UAE9DX,EAAOK,QAAAA,CAAUC,QAAAA,oBAA6BK,oBAG9CT,EAAMa,OAAO,MAGbhB,EAAQiB,IAAI,WAAe,EAE3BhB,EAAOK,QAAAA,CAAUC,QAAAA,6BAAsCC,KAAKC,UAAUT,EAAQiB,IAAIC,iBAI5EC,KAAM,KACNC,QAASN,EACTO,UAAWT,EACXC,SAAU,WACVS,UAAU,EACVC,YAAY,EACZC,UAAU,EACVC,SAAS,EACTC,aAAa,EACbR,WAAW,EACXS,YAAY,EACZC,KAAK,UAGJC,SACL5B,EAAO6B,KAAAA,CAAOvB,QAAS,0CAGnBwB,WAAAA,CACIxB,QAASsB,EAAItB,QACbM,SAAUV,EAAMU,SAChBmB,SAAU7B,EAAMgB,KAChBc,MAAOJ,EAAII,MACXC,KAAML,EAAIK,KACVC,UAAAA,CACIzB,WAAYP,EAAMQ,UAClByB,eAAAA,CAAAA,CAEQC,MAAAA,CACAC,KAAM,EACNC,OAAQ,GAERC,IAAAA,CACAF,KAAM,EACNC,OAAQ,GAERhC,QAAS,2CAIrBkC,MAAAA,CACI","sources":["./src/index.ts"],"sourcesContent":["import { Transformer } from \"@parcel/plugin\"\r\nimport ThrowableDiagnostic from \"@parcel/diagnostic\"\r\nimport { transformMarkdownString } from '@ermish/shuji'\r\nimport { basename } from 'path'\r\n\r\nexport default (new Transformer({\r\n//   async loadConfig({ config, options, logger }) {\r\n//     return config\r\n//   },\r\n\r\n  // async parse({ asset, config, logger, resolve, options }) {\r\n  //   logger.info({ message: 'Shuji: Parsing markdown files...' })\r\n\r\n  //   return ast\r\n  // },\r\n\r\n  async canReuseAST({ ast, options, logger }) {\r\n    return false\r\n  },\r\n\r\n  async transform({ asset, config, logger, resolve, options }) {\r\n\r\n      try {\r\n\r\n          logger.verbose({ message: `Shuji: options= ${JSON.stringify(options)}`})\r\n        //   logger.verbose({ message: `Shuji: options.env= ${JSON.stringify(options.env)}`})\r\n\r\n          logger.verbose({ message: `Shuji: before calling get code.`})\r\n\r\n\r\n          const code = await asset.getCode()\r\n\r\n          logger.verbose({ message: `Shuji: get code works!`})\r\n\r\n          const newComponentName = basename(asset.filePath, '.md')\r\n\r\n          logger.verbose({ message: `Shuji: get component name works!`})\r\n\r\n          logger.verbose({ message: 'Shuji: Converting markdown to jsx...'})\r\n\r\n          const transformedString = await transformMarkdownString(code, newComponentName)\r\n\r\n          logger.verbose({ message: `Shuji: creating \"${newComponentName}\" component...`})\r\n\r\n          //asset.setCode(transformedString)\r\n          asset.setMap(null)\r\n\r\n          //disable source maps. No need since optimizations would happen at a later step.\r\n          options.env['sourceMap'] = false\r\n\r\n          logger.verbose({ message: `Shuji: options.sourcemap= ${JSON.stringify(options.env.sourceMap)}`})\r\n\r\n        return [\r\n            {\r\n                type: 'js',\r\n                content: transformedString,\r\n                uniqueKey: newComponentName,\r\n                filePath: 'jsxFiles',\r\n                isSource: false,\r\n                isIsolated: true,\r\n                isInline: true,\r\n                isEntry: true,\r\n                sideEffects: false,\r\n                sourceMap: false,\r\n                sourceMaps: false,\r\n                map: false\r\n            }\r\n        ]\r\n        } catch (err) {\r\n            logger.info({ message: 'Shuji: Error occurred!'})\r\n\r\n            throw new ThrowableDiagnostic({\r\n                diagnostic: {\r\n                    message: err.message,\r\n                    filePath: asset.filePath,\r\n                    language: asset.type,\r\n                    stack: err.stack,\r\n                    name: err.name,\r\n                    codeFrame: {\r\n                        code: await asset.getCode(),\r\n                        codeHighlights: [\r\n                            {\r\n                                start: {\r\n                                line: 1,\r\n                                column: 5,\r\n                                },\r\n                                end: {\r\n                                line: 2,\r\n                                column: 3,\r\n                                },\r\n                                message: \"This is my error message!!!! oh noes!\",\r\n                            },\r\n                        ],\r\n                    },\r\n                    hints: [\r\n                        \"Try using a markdown validator to ensure your mardown files are valid.\",\r\n                    ],\r\n                },\r\n            })\r\n        }\r\n    }\r\n}))\r\n"],"names":["canReuseAST","ast","options","logger","transform","asset","config","resolve","verbose","message","JSON","stringify","code","getCode","newComponentName","filePath","transformedString","transformMarkdownString","setMap","env","sourceMap","type","content","uniqueKey","isSource","isIsolated","isInline","isEntry","sideEffects","sourceMaps","map","err","info","diagnostic","language","stack","name","codeFrame","codeHighlights","start","line","column","end","hints"],"version":3,"file":"index.js.map"}